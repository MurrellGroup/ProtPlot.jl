var documenterSearchIndex = {"docs":
[{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"EditURL = \"../../../examples/atomplot.jl\"","category":"page"},{"location":"generated/atomplot/#AtomPlot","page":"AtomPlot","title":"AtomPlot","text":"","category":"section"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"This example shows how to animate the flow of protein residue \"frames\", linearly interpolating between a point sampled from a gaussian, to a target protein structure.","category":"page"},{"location":"generated/atomplot/#Setup","page":"AtomPlot","title":"Setup","text":"","category":"section"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"using ProteinChains # reexports Backboner.Frames\nusing Manifolds, LinearAlgebra, Statistics\n\nfunction initial_frames(frames₁::Frames)\n    M = Rotations(3)\n    E = Euclidean(3)\n    R₁ = eachslice(frames₁.rotations, dims=3)\n    t₁ = eachslice(frames₁.translations, dims=2)\n    μ = mean(t₁)\n    σ = std(t₁)\n    R₀ = stack(rand(M, length(R₁)))\n    t₀ = stack(rand(E, length(t₁))) .* σ .+ μ\n    Frames(R₀, t₀)\nend\n\nfunction interpolate_frames(frames₀::Frames, frames₁::Frames, t::Number)\n    SO3 = SpecialOrthogonal(3) # rotation manifold\n    E = Euclidean(3)           # translation manifold\n\n    Rₜ = stack(axes(frames₀.rotations, 3)) do i\n        R₀ = frames₀.rotations[:, :, i]\n        R₁ = frames₁.rotations[:, :, i]\n        exp(SO3, R₀, t * log(SO3, R₀, R₁))\n    end\n\n    tₜ = stack(axes(frames₀.translations, 2)) do i\n        t₀ = frames₀.translations[:, i]\n        t₁ = frames₁.translations[:, i]\n        exp(E, t₀, t * log(E, t₀, t₁))\n    end\n\n    return Frames(Rₜ, tₜ)\nend;\nnothing #hide","category":"page"},{"location":"generated/atomplot/#Animation","page":"AtomPlot","title":"Animation","text":"","category":"section"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"using GLMakie, ProtPlot, Printf\nset_theme!(theme_black())\n\ntime = Observable(0.0)\n\nfig = Figure(size=(800,600))\nax = Axis3(fig[1,1], title=(@lift \"time = $(@sprintf(\"%.2f\", $time))\"),\n    perspectiveness=0.2, aspect=:data, viewmode=:fit)\n\nchain = pdb\"1M4X\"A\nframes₁ = Frames(chain)\nframes₀ = initial_frames(frames₁)\nframesₜ = @lift interpolate_frames(frames₀, frames₁, $time)\n\np = atomplot!(ax, framesₜ;\n    color=repeat(range(0, 1, size(frames₁.rotations, 3)), inner=3), colormap=:jet);\nnothing #hide","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"record(fig, \"frames.mp4\", -0.2:0.01:1.5, framerate=48) do t\n    if 0 < t <= 1\n        time[] = t\n    end\n    if t == 1.2\n        ribbon!(ax.scene, frames₁)\n        delete!(ax, p)\n    end\n    autolimits!(ax)\nend;\nnothing #hide","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"(Image: )","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"EditURL = \"../../../examples/spatialgraphplot.jl\"","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"SpatialGraphPlot","category":"page"},{"location":"generated/spatialgraphplot/#Setup","page":"SpatialGraphPlot","title":"Setup","text":"","category":"section"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"using ProteinChains # reexports Backboner.Frames\nusing Manifolds, LinearAlgebra, Statistics\n\nfunction initial_frames(frames₁::Frames)\n    M = Rotations(3)\n    E = Euclidean(3)\n    R₁ = eachslice(frames₁.rotations, dims=3)\n    t₁ = eachslice(frames₁.translations, dims=2)\n    μ = mean(t₁)\n    σ = std(t₁)\n    R₀ = stack(rand(M, length(R₁)))\n    t₀ = stack(rand(E, length(t₁))) .* σ .+ μ\n    Frames(R₀, t₀)\nend\n\nfunction interpolate_frames(frames₀::Frames, frames₁::Frames, t::Number)\n    SO3 = SpecialOrthogonal(3) # rotation manifold\n    E = Euclidean(3)           # translation manifold\n\n    Rₜ = stack(axes(frames₀.rotations, 3)) do i\n        R₀ = frames₀.rotations[:, :, i]\n        R₁ = frames₁.rotations[:, :, i]\n        exp(SO3, R₀, t * log(SO3, R₀, R₁))\n    end\n\n    tₜ = stack(axes(frames₀.translations, 2)) do i\n        t₀ = frames₀.translations[:, i]\n        t₁ = frames₁.translations[:, i]\n        exp(E, t₀, t * log(E, t₀, t₁))\n    end\n\n    return Frames(Rₜ, tₜ)\nend;\nnothing #hide","category":"page"},{"location":"generated/spatialgraphplot/#Animation","page":"SpatialGraphPlot","title":"Animation","text":"","category":"section"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"using GLMakie, ProtPlot, Printf\nset_theme!(theme_black())\n\ntime = Observable(0.0)\n\nfig = Figure(size=(800,600))\nax = Axis3(fig[1,1], title=(@lift \"time = $(@sprintf(\"%.2f\", $time))\"),\n    perspectiveness=0.2, aspect=:data, viewmode=:fit)\n\nchain = pdb\"1ASS\"A\nframes₁ = Frames(chain)\nframes₀ = initial_frames(frames₁)\nframesₜ = @lift interpolate_frames(frames₀, frames₁, $time)\n\nk, n = 1, length(chain)\nnew_graph() = rand(n, n) .< k / n\ngraphs = [Observable(new_graph()) for _ in 1:2]\nfor (graph, color) in zip(graphs, [:blue, :red])\n    spatialgraphplot!(ax, (@lift eachcol(($framesₜ).translations)), graph; color, alpha=0.2, linewidth=2)\nend\n\np = atomplot!(ax, framesₜ;\n    color=repeat(range(0, 1, n), inner=3), colormap=:jet, alpha=0.5);\nnothing #hide","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"record(fig, \"graphs.mp4\", enumerate(-0.2:0.01:1.5), framerate=48) do (i, t);\n    if 0 < t <= 1\n        time[] = t\n        if i % 5 == 0\n            for graph in graphs\n                graph[] = new_graph()\n            end\n        end\n    end\n    if t == 1.2\n        ribbon!(ax.scene, frames₁)\n        delete!(ax, p)\n    end\n    autolimits!(ax)\nend;\nnothing #hide","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"(Image: )","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProtPlot","category":"page"},{"location":"#ProtPlot","page":"Home","title":"ProtPlot","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ProtPlot.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ProtPlot]","category":"page"},{"location":"#ProtPlot.ribbon_scene-Tuple","page":"Home","title":"ProtPlot.ribbon_scene","text":"ribbon_scene(chain_backbones::AbstractVector{<:AbstractArray{T,3}}; backgroundcolor=:black, camcontrols=(;), kwargs...)\n\nRender a protein as a ribbon diagram. The display will be automatically centered on the rendered ribbon, unless the user supplies camcontrols (see Makie's camera documentation for details).\n\n\n\n\n\n","category":"method"}]
}

var documenterSearchIndex = {"docs":
[{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"EditURL = \"../../../examples/atomplot.jl\"","category":"page"},{"location":"generated/atomplot/#AtomPlot","page":"AtomPlot","title":"AtomPlot","text":"","category":"section"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"This example shows how to animate the flow of protein residue \"frames\", linearly interpolating between a point sampled from a gaussian, to a target protein structure.","category":"page"},{"location":"generated/atomplot/#Setup","page":"AtomPlot","title":"Setup","text":"","category":"section"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"using ProteinChains # reexports Backboner.Frames\nusing Manifolds, LinearAlgebra, Statistics\n\nfunction initial_frames(frames₁::Frames)\n    M = Rotations(3)\n    E = Euclidean(3)\n    R₁ = eachslice(frames₁.rotations, dims=3)\n    t₁ = eachslice(frames₁.translations, dims=2)\n    μ = mean(t₁)\n    σ = std(t₁)\n    R₀ = stack(rand(M, length(R₁)))\n    t₀ = stack(rand(E, length(t₁))) .* σ .+ μ\n    Frames(R₀, t₀)\nend\n\nfunction interpolate_frames(frames₀::Frames, frames₁::Frames, t::Number)\n    M = Rotations(3)\n    E = Euclidean(3)\n    Rₜ = stack(axes(frames₀.rotations, 3)) do i\n        R₀, R₁ = frames₀.rotations[:,:,i], frames₁.rotations[:,:,i]\n        exp(M, R₀, t * log(M, R₀, R₁))\n    end\n    tₜ = stack(axes(frames₀.translations, 2)) do i\n        t₀, t₁ = frames₀.translations[:,i], frames₁.translations[:,i]\n        exp(E, t₀, t * log(E, t₀, t₁))\n    end\n    return Frames(Rₜ, tₜ)\nend;\nnothing #hide","category":"page"},{"location":"generated/atomplot/#Animation","page":"AtomPlot","title":"Animation","text":"","category":"section"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"using GLMakie, ProtPlot, Printf\nset_theme!(theme_black())\n\ntime = Observable(0.0)\n\nfig = Figure(size=(800,600))\nax = Axis3(fig[1,1], title=(@lift \"time = $(@sprintf(\"%.2f\", $time))\"),\n    perspectiveness=0.2, aspect=:data, viewmode=:fit)\n\nchain = pdb\"1M4X\"A\nframes₁ = Frames(chain)\nframes₀ = initial_frames(frames₁)\nframesₜ = @lift interpolate_frames(frames₀, frames₁, $time)\n\np = atomplot!(ax, framesₜ;\n    color=repeat(range(0, 1, size(frames₁.rotations, 3)), inner=3), colormap=:jet);\nnothing #hide","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"record(fig, \"frames.mp4\", -0.2:0.01:1.5, framerate=48) do t\n    if 0 < t <= 1\n        time[] = t\n    end\n    if t == 1.2\n        ribbon!(ax.scene, frames₁)\n        delete!(ax, p)\n    end\n    autolimits!(ax)\nend;\nnothing #hide","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"(Image: )","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"","category":"page"},{"location":"generated/atomplot/","page":"AtomPlot","title":"AtomPlot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"EditURL = \"../../../examples/spatialgraphplot.jl\"","category":"page"},{"location":"generated/spatialgraphplot/#SpatialGraphPlot","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"","category":"section"},{"location":"generated/spatialgraphplot/#Setup","page":"SpatialGraphPlot","title":"Setup","text":"","category":"section"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"using ProteinChains # reexports Backboner.Frames\nusing Manifolds, LinearAlgebra, Statistics\n\nfunction initial_frames(frames₁::Frames)\n    M = Rotations(3)\n    E = Euclidean(3)\n    R₁ = eachslice(frames₁.rotations, dims=3)\n    t₁ = eachslice(frames₁.translations, dims=2)\n    μ = mean(t₁)\n    σ = std(t₁)\n    R₀ = stack(rand(M, length(R₁)))\n    t₀ = stack(rand(E, length(t₁))) .* σ .+ μ\n    Frames(R₀, t₀)\nend\n\nfunction interpolate_frames(frames₀::Frames, frames₁::Frames, t::Number)\n    M = Rotations(3)\n    E = Euclidean(3)\n    Rₜ = stack(axes(frames₀.rotations, 3)) do i\n        R₀ = frames₀.rotations[:,:,i]\n        R₁ = frames₁.rotations[:,:,i]\n        exp(M, R₀, t * log(M, R₀, R₁))\n    end\n    tₜ = stack(axes(frames₀.translations, 2)) do i\n        t₀ = frames₀.translations[:,i]\n        t₁ = frames₁.translations[:,i]\n        exp(E, t₀, t * log(E, t₀, t₁))\n    end\n    return Frames(Rₜ, tₜ)\nend;\nnothing #hide","category":"page"},{"location":"generated/spatialgraphplot/#Animation","page":"SpatialGraphPlot","title":"Animation","text":"","category":"section"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"using GLMakie, ProtPlot, Printf\nset_theme!(theme_black())\n\ntime = Observable(0.0)\n\nfig = Figure(size=(800,600))\nax = Axis3(fig[1,1], title=(@lift \"time = $(@sprintf(\"%.2f\", $time))\"),\n    perspectiveness=0.2, aspect=:data, viewmode=:fit)\n\nchain = pdb\"1ASS\"A\nframes₁ = Frames(chain)\nframes₀ = initial_frames(frames₁)\nframesₜ = @lift interpolate_frames(frames₀, frames₁, $time)\n\nk, n = 1, length(chain)\nnew_graph() = rand(n, n) .< k / n\ngraphs = [Observable(new_graph()) for _ in 1:2]\nfor (graph, color) in zip(graphs, [:blue, :red])\n    spatialgraphplot!(ax, (@lift eachcol(($framesₜ).translations)), graph; color, alpha=0.3, linewidth=1.5)\nend\n\np = atomplot!(ax, framesₜ;\n    color=repeat(range(0, 1, n), inner=3), colormap=:jet, alpha=0.5);\nnothing #hide","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"record(fig, \"graphs.mp4\", enumerate(-0.2:0.01:1.5), framerate=48) do (i, t);\n    if 0 < t <= 1\n        time[] = t\n        if i % 5 == 0\n            for graph in graphs\n                graph[] = new_graph()\n            end\n        end\n    end\n    if t == 1.2\n        ribbon!(ax.scene, frames₁)\n        delete!(ax, p)\n    end\n    autolimits!(ax)\nend;\nnothing #hide","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"(Image: )","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"","category":"page"},{"location":"generated/spatialgraphplot/","page":"SpatialGraphPlot","title":"SpatialGraphPlot","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ramachandran/","page":"Ramachandran","title":"Ramachandran","text":"EditURL = \"../../../examples/ramachandran.jl\"","category":"page"},{"location":"generated/ramachandran/#Ramachandran","page":"Ramachandran","title":"Ramachandran","text":"","category":"section"},{"location":"generated/ramachandran/","page":"Ramachandran","title":"Ramachandran","text":"using GLMakie, ProtPlot\n\nset_theme!(theme_black())\n\nfig = Figure()\nax = Axis(fig[1,1], title=\"Ramachandran plot\",\n    xlabel=\"Phi\", ylabel=\"Psi\",\n    yticks=(-180:90:180, [\"-180°\", \"-90°\", \"0°\", \"90°\", \"180°\"]),\n    xticks=(-180:90:180, [\"-180°\", \"-90°\", \"0°\", \"90°\", \"180°\"]),\n    limits=((-180, 180), (-180, 180)))\n\nramachandran!(ax, pdb\"1ASS\", color=:white)\n\nfig","category":"page"},{"location":"generated/ramachandran/","page":"Ramachandran","title":"Ramachandran","text":"","category":"page"},{"location":"generated/ramachandran/","page":"Ramachandran","title":"Ramachandran","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"EditURL = \"../../../examples/ribbon.jl\"","category":"page"},{"location":"generated/ribbon/#Ribbon","page":"Ribbon","title":"Ribbon","text":"","category":"section"},{"location":"generated/ribbon/#Interactive-scene","page":"Ribbon","title":"Interactive scene","text":"","category":"section"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"using GLMakie, ProtPlot\nusing ProteinChains\n\nribbon(pdb\"1ASS\")","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"ribbon(pdb\"1ASS\", colors=rand.(length.(pdb\"1ASS\")))","category":"page"},{"location":"generated/ribbon/#Add-to-existing-scene","page":"Ribbon","title":"Add to existing scene","text":"","category":"section"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"fig = Figure()\nax = LScene(fig[1,1])\n\nribbon!(ax, get_backbone(pdb\"1EYE\"A))\nribbon!(ax, get_backbone(pdb\"1EYE\"A) .+ [-30, 30, 0], colormap=:blues)\n\nfig","category":"page"},{"location":"generated/ribbon/#Attributes","page":"Ribbon","title":"Attributes","text":"","category":"section"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"You may customize the geometry of the ribbon by specifying the value of attributes in the keyword arguments of your call. Here's a list of available attributes and their defaults:","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"secondary_structures = nothing (gets assigned by an algorithm by default;","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"needs to be a vector of Vector{Int} where 1 means loop, 2 means helix, and 3 means strand)","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"colors = nothing (gets assigned range(0, 1, L) for each chain by default,","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"mapping to colormap; overrides colormap if colorants are given)","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"colormap = :jet (see the ColorSchemes.jl catalogue;","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"can also be a vector of colorants)","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"coil_diameter = 0.4\ncoil_spline_quality = 20\ncoil_slice_quality = 20\nhelix_width = 2.0\nhelix_thickness = 0.5\nhelix_spline_quality = 20\nhelix_slice_quality = 20\nstrand_width = 2.0\nstrand_thickness = 0.5\nstrand_arrow_head_length = 5.0\nstrand_arrow_head_width = 3.5\nstrand_spline_quality = 20","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"ribbon(pdb\"1ASS\",\n    coil_diameter=0.6, helix_width=1.5,\n    strand_width=1.5, strand_arrow_head_length=3.0)","category":"page"},{"location":"generated/ribbon/#Animation","page":"Ribbon","title":"Animation","text":"","category":"section"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"Ribbon plots are rendered as a set of surfaces, but observables don't properly propagate the updates since the number of surfaces may vary, unlike other plot types, which can render everything in a single Makie call. For animating ribbon plots, one solution is to delete the plot from the scene and redraw it every frame.","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"fig = Figure()\nax = LScene(fig[1,1])\n\np = ribbon!(ax, pdb\"1ASS\")\n\ndelete!(ax.scene, p)\n\nribbon!(ax, pdb\"1EYE\")\n\nfig","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"","category":"page"},{"location":"generated/ribbon/","page":"Ribbon","title":"Ribbon","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProtPlot","category":"page"},{"location":"#ProtPlot","page":"Home","title":"ProtPlot","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ProtPlot.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ProtPlot]","category":"page"},{"location":"#ProtPlot.ribbon_scene-Tuple","page":"Home","title":"ProtPlot.ribbon_scene","text":"ribbon_scene(chain_backbones::AbstractVector{<:AbstractArray{T,3}}; backgroundcolor=:black, camcontrols=(;), kwargs...)\n\nRender a protein as a ribbon diagram. The display will be automatically centered on the rendered ribbon, unless the user supplies camcontrols (see Makie's camera documentation for details).\n\n\n\n\n\n","category":"method"}]
}
